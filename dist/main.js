"use strict";(()=>{var p=document.getElementById("button"),g=document.getElementById("mode"),h=document.getElementById("setting"),L=document.querySelectorAll(".colors-list li"),k=document.getElementById("extra-color"),M=document.getElementById("u-image"),E=document.querySelectorAll(".footer li"),N=document.getElementById("task-icon"),w=document.getElementById("task-content"),b=document.querySelector(".checkbox input:first-child"),S=b.parentNode;var x=(e,t)=>{e?.addEventListener("click",o=>{t?.classList.toggle("hide"),e?.classList.toggle("clicked"),o.stopPropagation()})},T=e=>{document.addEventListener("click",t=>{e?.contains(t.target)||(e?.classList.add("hide"),e?.previousElementSibling?.classList.remove("clicked"),t.stopPropagation())})};p.addEventListener("click",()=>{h?.nextElementSibling?.classList.contains("hide")||h?.nextElementSibling?.classList.add("hide")});x(p,p?.nextElementSibling);T(p?.nextElementSibling);x(h,h?.nextElementSibling);T(h?.nextElementSibling);document.querySelector(".fa-bell")?.addEventListener("click",e=>{e.preventDefault(),Notification.requestPermission(t=>{console.log("Notification permission status:",t)})});var G=["/","/index.html","/dist/main.js","/dist/serviceWorker.js","/src/css/style.css","/src/css/all.min.css","/images/enter-task.webp","/images/modo-light.webp","/images/icon-72\xD772.ico","/images/icon-72\xD772.webp","/images/icon-96\xD796.webp","/images/icon-128\xD7128.webp","/images/icon-144\xD7144.webp","/images/icon-152\xD7152.webp","/images/icon-192\xD7192.webp","/images/icon-384\xD7384.webp","/images/icon-512\xD7512.webp","/src/webfonts/fa-solid-900.ttf","/src/webfonts/fa-brands-400.ttf","/src/webfonts/fa-regular-400.ttf","/src/webfonts/fa-v4compatibility.ttf","/src/webfonts/fa-solid-900.woff2","/src/webfonts/fa-brands-400.woff2","/src/webfonts/fa-regular-400.woff2","/src/webfonts/fa-v4compatibility.woff2"];self.addEventListener("install",e=>{e?.waitUntil(caches.open("modo").then(t=>t.addAll(G)))});self.addEventListener("fetch",e=>{e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request)))});self.addEventListener("fetch",e=>{e.respondWith(caches.open("modo").then(t=>fetch(e.request).then(o=>(t.put(e.request,o.clone()),o))))});function C(e){return new Promise((t,o)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>o(e.error)})}function P(e,t){let o=indexedDB.open(e);o.onupgradeneeded=()=>o.result.createObjectStore(t);let a=C(o);return(u,i)=>a.then(l=>i(l.transaction(t,u).objectStore(t)))}var I;function A(){return I||(I=P("keyval-store","keyval")),I}function H(e,t=A()){return t("readonly",o=>C(o.get(e)))}function R(e,t,o=A()){return o("readwrite",a=>(a.put(t,e),C(a.transaction)))}function D(e,t,o=A()){return o("readwrite",a=>new Promise((u,i)=>{a.get(e).onsuccess=function(){try{a.put(t(this.result),e),u(C(a.transaction))}catch(l){i(l)}}}))}var q=P("Modo","person");var m=(e,t)=>R(e,t,q),r=e=>H(e,q),K=(e,t)=>D(e,t,q);var y=(e,t,o)=>{let a=e.filter(n=>n.status?n:""),u=t.filter(n=>n.status?n:""),i=a.length!==0?a.length*100/e.length:0,l=u.length!==0?u.length*100/t.length:0,c=document.getElementById("progress");if(o){let n=setInterval(()=>{i>=l&&clearInterval(n),$(c,i),i++},50)}if(!o){let n=setInterval(()=>{i>=l&&clearInterval(n),$(c,l),l--},50)}},$=(e,t)=>{e.style.background=`conic-gradient(var(--fav-color) ${t/100}turn, var(--mode-color) 0deg)`,e.dataset.progress=t.toFixed(1)};var v=e=>(e.parentNode.classList.add("hide"),e.parentNode.parentNode.previousElementSibling),j=e=>{let t=v(e);t.setAttribute("contenteditable","true"),t.addEventListener("mouseleave",async()=>{t.removeAttribute("contenteditable");let o=await r("tasks");o[t.parentNode.dataset.id].content=t.textContent,K("tasks",()=>o),f(o)})};var W=async e=>{let t=await r("tasks"),o=t[v(e).parentNode.dataset.id].status,a=t;t.splice(v(e).parentNode.dataset.id,1),t.forEach((u,i)=>{u.id=i}),await m("tasks",t),f(t),y(a,t,o)},B=async(e,t)=>{let o=await r("tasks"),a=o;o[e.dataset.id].status=t,y(a,o,t),f(o),await m("tasks",o)};var F=async e=>{let t=await r("tasks"),o=v(e).parentNode;e.children[1].textContent=="Not Completed"?(B(o,!1),o.firstChild.style.bacgroundColor=t.icon+""):B(o,!0)};var f=async e=>{S.style.border="2px solid var(--choosen-color)",document.querySelectorAll(".tasks-list li")?.forEach(t=>{t.remove()}),e.forEach((t,o)=>{let a=document.createElement("span");a.classList.add("icon"),a.style.border=`2px solid ${t.icon}`,a.style.color=`${t.icon}`;let u=document.createElement("p");u.classList.add("task-content"),u.textContent=t.content;let i=document.createElement("div");i.classList.add("options"),i.innerHTML=`      
            <span class="span-opts">\u2022\u2022\u2022</span>
            <ul class="options-list hide">
              <li class="edit" onclick="window.edit(this)">
                <i class="fa-solid fa-pencil fa-sm"></i>
                <p>Edit</p>
              </li>
              <li class="completed" onclick="window.makeCompleted(this)">
                <i class="fa-solid fa-check fa-sm"></i>
                <p>${t.status==!1?"Completed":"Not Completed"}</p>
              </li>
              <li class="delete" onclick="window.deleteThis(this)">
                <i class="fa-solid fa-trash fa-sm"></i>
                <p>Delete</p>
              </li>
            </ul>
 `;let l=document.createElement("span");l.classList.add("move-task"),l.textContent=":::";let c=document.createElement("li");c.setAttribute("data-id",`${t.id}`),c.setAttribute("data-status",t.status?"completed":"not-completed"),r("tasks").then(s=>{s?.length>=5&&(s?.length-1==o||s?.length-2==o)&&c.classList.add("last-li")}),c.append(a),c.append(u),c.append(i),c.append(l),document.querySelector(".tasks-list")?.append(c);let n=document.querySelectorAll(".span-opts");n.forEach(s=>{s.addEventListener("click",()=>{n.forEach(d=>d.nextElementSibling?.classList.add("hide"))}),x(s,s.nextElementSibling),T(s.nextElementSibling)})}),y(await r("tasks"),e,!0)};window.edit=j;window.deleteThis=W;window.makeCompleted=F;document.addEventListener("DOMContentLoaded",async()=>{let e=await r("image");e==null&&await m("image",""),e!==""?p?.setAttribute("src",e):p?.removeAttribute("src"),M.addEventListener("change",n=>{let s=new FileReader;s.readAsDataURL(M.files?.item(0)),s.addEventListener("load",async()=>{await m("image",s.result),p?.setAttribute("src",`${s.result}`)}),n.stopPropagation()}),await r("mode")==null&&await m("mode",""),g?.addEventListener("click",()=>{let n=g?.classList.contains("dark")?"light":"dark";m("mode",n)});let o=await r("fav-color");o==null?await m("fav-color",""):document.querySelector("html")?.style.setProperty("--fav-color",o),k?.addEventListener("input",()=>{L[4].dataset.color=k.value,m("fav-color",k.value),document.querySelector("html")?.style.setProperty("--fav-color",k.value)}),L.forEach(n=>{n.addEventListener("click",()=>{m("fav-color",n.dataset.color),document.querySelector("html")?.style.setProperty("--fav-color",n.dataset.color)})}),await r("tasks")==null&&await m("tasks",[]),b?.addEventListener("input",n=>{S.style.border=`2px solid ${b.value}`,n.stopPropagation()});let u=[];document.querySelector(".input-box")?.addEventListener("submit",async n=>{if(w.value!==""){n.preventDefault();let s=await r("tasks");console.log(s);let d=[...s,{icon:N.value,id:s.length,content:w.value,status:!1}];m("tasks",d),f(d)}w.value=""});let i=new Map,l=new Map;i.set("--mode-color","#222").set("--alt-mode-color","#fff").set("--hover-color","#363636").set("--sec-mode-color","#333"),l.set("--mode-color","#fff").set("--alt-mode-color","#000").set("--hover-color","#f6f6f6").set("--sec-mode-color","#eee"),g?.addEventListener("click",n=>{if(n.stopPropagation(),g?.classList.toggle("dark"),g?.classList.contains("dark")==!0)for(let[s,d]of i)document.querySelector("html")?.style.setProperty(s,d);if(g?.classList.contains("dark")==!1)for(let[s,d]of l)document.querySelector("html")?.style.setProperty(s,d)});function c(n,...s){n.forEach(d=>{d.addEventListener("click",O=>{n.forEach(V=>V.classList.remove(s.join(" "))),O.target.classList.add("active")})})}c(L,"active"),c(E,"active"),E[0].addEventListener("click",async()=>{let n=await r("tasks");f(n)}),E[1].addEventListener("click",async()=>{let n=await r("tasks");f(n.filter(s=>s.status?"":s))}),E[2].addEventListener("click",async()=>{let n=await r("tasks");f(n.filter(s=>s.status?s:""))}),r("mode").then(n=>{if(n=="dark"){g?.classList.add("dark");for(let[s,d]of i)document.querySelector("html")?.style.setProperty(s,d)}if(n!="dark"){g?.classList.remove("dark");for(let[s,d]of l)document.querySelector("html")?.style.setProperty(s,d)}}),r("tasks").then(n=>{n&&n!=null&&(y([],n,!0),f(n))})});})();
//# sourceMappingURL=data:application/json;base64,
