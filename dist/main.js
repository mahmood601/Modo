"use strict";(()=>{var f=document.getElementById("button"),g=document.getElementById("mode"),y=document.getElementById("setting"),b=document.querySelectorAll(".colors-list li"),v=document.getElementById("extra-color"),M=document.getElementById("u-image"),k=document.querySelectorAll(".footer li"),B=document.getElementById("task-icon"),L=document.getElementById("task-content"),w=document.querySelector(".checkbox input:first-child"),S=w.parentNode;var x=(e,t)=>{e?.addEventListener("click",n=>{t?.classList.toggle("hide"),e?.classList.toggle("clicked"),n.stopPropagation()})},T=e=>{document.addEventListener("click",t=>{e?.contains(t.target)||(e?.classList.add("hide"),e?.previousElementSibling?.classList.remove("clicked"),t.stopPropagation())})};f.addEventListener("click",()=>{y?.nextElementSibling?.classList.contains("hide")||y?.nextElementSibling?.classList.add("hide")});x(f,f?.nextElementSibling);T(f?.nextElementSibling);x(y,y?.nextElementSibling);T(y?.nextElementSibling);document.querySelector(".fa-bell")?.addEventListener("click",e=>{e.preventDefault(),Notification.requestPermission(t=>{console.log("Notification permission status:",t)})});var G=["/","/index.html","/dist/main.js","/dist/serviceWorker.js","/src/css/style.css","/src/css/all.min.css","/images/enter-task.webp","/images/modo-light.webp","/images/icon-72\xD772.ico","/images/icon-72\xD772.webp","/images/icon-96\xD796.webp","/images/icon-128\xD7128.webp","/images/icon-144\xD7144.webp","/images/icon-152\xD7152.webp","/images/icon-192\xD7192.webp","/images/icon-384\xD7384.webp","/images/icon-512\xD7512.webp","/src/webfonts/fa-solid-900.ttf","/src/webfonts/fa-brands-400.ttf","/src/webfonts/fa-regular-400.ttf","/src/webfonts/fa-v4compatibility.ttf","/src/webfonts/fa-solid-900.woff2","/src/webfonts/fa-brands-400.woff2","/src/webfonts/fa-regular-400.woff2","/src/webfonts/fa-v4compatibility.woff2"];self.addEventListener("install",e=>{e?.waitUntil(caches.open("modo").then(t=>t.addAll(G)))});self.addEventListener("fetch",e=>{e.respondWith(caches.match(e.request).then(t=>t||fetch(e.request)))});self.addEventListener("fetch",e=>{e.respondWith(caches.open("modo").then(t=>fetch(e.request).then(n=>(t.put(e.request,n.clone()),n))))});function C(e){return new Promise((t,n)=>{e.oncomplete=e.onsuccess=()=>t(e.result),e.onabort=e.onerror=()=>n(e.error)})}function P(e,t){let n=indexedDB.open(e);n.onupgradeneeded=()=>n.result.createObjectStore(t);let a=C(n);return(c,r)=>a.then(l=>r(l.transaction(t,c).objectStore(t)))}var I;function A(){return I||(I=P("keyval-store","keyval")),I}function H(e,t=A()){return t("readonly",n=>C(n.get(e)))}function R(e,t,n=A()){return n("readwrite",a=>(a.put(t,e),C(a.transaction)))}function D(e,t,n=A()){return n("readwrite",a=>new Promise((c,r)=>{a.get(e).onsuccess=function(){try{a.put(t(this.result),e),c(C(a.transaction))}catch(l){r(l)}}}))}var N=P("Modo","person");var u=(e,t)=>R(e,t,N),i=e=>H(e,N),$=(e,t)=>D(e,t,N);var E=(e,t)=>{let n=e.filter(l=>l.status?l:""),a=Number.parseInt(`${n.length!==0?n.length*100/e.length:0}`),c=document.getElementById("progress"),r=Number.parseInt(c.dataset.progress);if(a>r){let l=setInterval(()=>{a<=r&&clearInterval(l),K(c,r),r++},20)}if(a<r){let l=setInterval(()=>{r<=a&&clearInterval(l),K(c,r),r--},20)}},K=(e,t)=>{e.style.background=`conic-gradient(var(--fav-color) ${t/100}turn, var(--mode-color) 0deg)`,e.dataset.progress=t};var h=e=>(e.parentNode.classList.add("hide"),e.parentNode.parentNode.previousElementSibling),j=e=>{let t=h(e);t.setAttribute("contenteditable","true"),t.addEventListener("mouseleave",async()=>{t.removeAttribute("contenteditable");let n=await i("tasks");n[t.parentNode.dataset.id].content=t.textContent,$("tasks",()=>n),p(n)})};var W=async e=>{let t=await i("tasks"),n=t[h(e).parentNode.dataset.id].status;t.splice(h(e).parentNode.dataset.id,1),t.forEach((a,c)=>{a.id=c}),await u("tasks",t),p(t),E(t,n)},q=(e,t)=>{i("tasks").then(async n=>{n[e.dataset.id].status=t,E(n,t),p(n),await u("tasks",n)})};var O=async e=>{let t=await i("tasks"),n=h(e).parentNode;e.children[1].textContent=="Not Completed"?(q(n,!1),n.firstChild.style.bacgroundColor=t.icon+""):q(n,!0)};var p=async e=>{S.style.border="2px solid var(--choosen-color)",document.querySelectorAll(".tasks-list li")?.forEach(t=>{t.remove()}),e.forEach((t,n)=>{let a=document.createElement("span");a.classList.add("icon"),a.style.border=`2px solid ${t.icon}`,a.style.color=`${t.icon}`;let c=document.createElement("p");c.classList.add("task-content"),c.textContent=t.content;let r=document.createElement("div");r.classList.add("options"),r.innerHTML=`      
            <span class="span-opts">\u2022\u2022\u2022</span>
            <ul class="options-list hide">
              <li class="edit" onclick="window.edit(this)">
                <i class="fa-solid fa-pencil fa-sm"></i>
                <p>Edit</p>
              </li>
              <li class="completed" onclick="window.makeCompleted(this)">
                <i class="fa-solid fa-check fa-sm"></i>
                <p>${t.status==!1?"Completed":"Not Completed"}</p>
              </li>
              <li class="delete" onclick="window.deleteThis(this)">
                <i class="fa-solid fa-trash fa-sm"></i>
                <p>Delete</p>
              </li>
            </ul>
 `;let l=document.createElement("span");l.classList.add("move-task"),l.textContent=":::";let m=document.createElement("li");m.setAttribute("data-id",`${t.id}`),m.setAttribute("data-status",t.status?"completed":"not-completed"),i("tasks").then(o=>{o?.length>=5&&(o?.length-1==n||o?.length-2==n)&&m.classList.add("last-li")}),m.append(a),m.append(c),m.append(r),m.append(l),document.querySelector(".tasks-list")?.append(m);let s=document.querySelectorAll(".span-opts");s.forEach(o=>{o.addEventListener("click",()=>{s.forEach(d=>d.nextElementSibling?.classList.add("hide"))}),x(o,o.nextElementSibling),T(o.nextElementSibling)})}),E(e,!0)};window.edit=j;window.deleteThis=W;window.makeCompleted=O;document.addEventListener("DOMContentLoaded",async()=>{let e=await i("image");e==null&&await u("image",""),e!==""?f?.setAttribute("src",e):f?.removeAttribute("src"),M.addEventListener("change",s=>{let o=new FileReader;o.readAsDataURL(M.files?.item(0)),o.addEventListener("load",async()=>{await u("image",o.result),f?.setAttribute("src",`${o.result}`)}),s.stopPropagation()}),await i("mode")==null&&await u("mode",""),g?.addEventListener("click",()=>{let s=g?.classList.contains("dark")?"light":"dark";u("mode",s)});let n=await i("fav-color");n==null?await u("fav-color",""):document.querySelector("html")?.style.setProperty("--fav-color",n),v?.addEventListener("input",()=>{b[4].dataset.color=v.value,u("fav-color",v.value),document.querySelector("html")?.style.setProperty("--fav-color",v.value)}),b.forEach(s=>{s.addEventListener("click",()=>{u("fav-color",s.dataset.color),document.querySelector("html")?.style.setProperty("--fav-color",s.dataset.color)})}),await i("tasks")==null&&await u("tasks",[]),w?.addEventListener("input",s=>{S.style.border=`2px solid ${w.value}`,s.stopPropagation()});let c=[];document.querySelector(".input-box")?.addEventListener("submit",async s=>{if(L.value!==""){s.preventDefault();let o=await i("tasks");console.log(o);let d=[...o,{icon:B.value,id:o.length,content:L.value,status:!1}];u("tasks",d),p(d)}L.value=""});let r=new Map,l=new Map;r.set("--mode-color","#222").set("--alt-mode-color","#fff").set("--hover-color","#363636").set("--sec-mode-color","#333"),l.set("--mode-color","#fff").set("--alt-mode-color","#000").set("--hover-color","#f6f6f6").set("--sec-mode-color","#eee"),g?.addEventListener("click",s=>{if(s.stopPropagation(),g?.classList.toggle("dark"),g?.classList.contains("dark")==!0)for(let[o,d]of r)document.querySelector("html")?.style.setProperty(o,d);if(g?.classList.contains("dark")==!1)for(let[o,d]of l)document.querySelector("html")?.style.setProperty(o,d)});function m(s,...o){s.forEach(d=>{d.addEventListener("click",F=>{s.forEach(V=>V.classList.remove(o.join(" "))),F.target.classList.add("active")})})}m(b,"active"),m(k,"active"),k[0].addEventListener("click",async()=>{let s=await i("tasks");p(s)}),k[1].addEventListener("click",async()=>{let s=await i("tasks");p(s.filter(o=>o.status?"":o))}),k[2].addEventListener("click",async()=>{let s=await i("tasks");p(s.filter(o=>o.status?o:""))}),i("mode").then(s=>{if(s=="dark"){g?.classList.add("dark");for(let[o,d]of r)document.querySelector("html")?.style.setProperty(o,d)}if(s!="dark"){g?.classList.remove("dark");for(let[o,d]of l)document.querySelector("html")?.style.setProperty(o,d)}}),i("tasks").then(s=>{s&&s!=null&&p(s)})});})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3RzL2VsZW1lbnRzLnRzIiwgIi4uL3NyYy90cy9tZW51LnRzIiwgIi4uL3NyYy90cy9ub3RpZmljYXRpb25zLnRzIiwgIi4uL3NyYy90cy9zZXJ2aWNlV29ya2VyLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9pZGIta2V5dmFsL2Rpc3QvaW5kZXguanMiLCAiLi4vc3JjL3RzL3N0b3JhZ2UudHMiLCAiLi4vc3JjL3RzL3Byb2dyZXNzLnRzIiwgIi4uL3NyYy90cy9UYXNrcy9lZGl0LnRzIiwgIi4uL3NyYy90cy9UYXNrcy9kZWxldGUudHMiLCAiLi4vc3JjL3RzL1Rhc2tzL21ha2VDb21wbGV0ZS50cyIsICIuLi9zcmMvdHMvcmVuZGVyZXIudHMiLCAiLi4vc3JjL3RzL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImV4cG9ydCBjb25zdFxuICBtYWluQnV0dG9uOiBIVE1MSW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXR0b25cIikgYXMgSFRNTEltYWdlRWxlbWVudCxcbiAgbW9kZUJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9kZVwiKSxcbiAgc2V0dGluZzogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZXR0aW5nXCIpLFxuICBjb2xvcnNMaXN0OiBhbnkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNvbG9ycy1saXN0IGxpXCIpLFxuICBleHRyYUNvbG9yOiBhbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImV4dHJhLWNvbG9yXCIpLFxuICB1c2VySW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInUtaW1hZ2VcIikgYXMgSFRNTElucHV0RWxlbWVudCxcbiAgc3RhdHVzTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm9vdGVyIGxpXCIpLFxuICB0YXNrSWNvbjogSFRNTElucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGFzay1pY29uXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQsXG4gIHRhc2tDb250ZW50OiBIVE1MSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0YXNrLWNvbnRlbnRcIikgYXMgSFRNTElucHV0RWxlbWVudCxcbiAgaW5wdXRUYXNrQ29sb3I6IEhUTUxJbnB1dEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNoZWNrYm94IGlucHV0OmZpcnN0LWNoaWxkXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQsXG4gIHBhcmVudGlucHV0ID0gaW5wdXRUYXNrQ29sb3IucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudFxuXG5cblxuIiwgImltcG9ydCB7IG1haW5CdXR0b24sIHNldHRpbmcgfSBmcm9tIFwiLi9lbGVtZW50c1wiO1xuXG5cbi8vIE1lbnUgTG9naWNcbmV4cG9ydCBjb25zdCB0b2dnbGVNZW51ID0gKGJ1dHRvbjogSFRNTEVsZW1lbnQgfCBudWxsLCBtZW51OiBFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZCk6IHZvaWQgPT4ge1xuICBidXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICBtZW51Py5jbGFzc0xpc3QudG9nZ2xlKFwiaGlkZVwiKTtcbiAgICBidXR0b24/LmNsYXNzTGlzdC50b2dnbGUoXCJjbGlja2VkXCIpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IGhpZGVNZW51ID0gKG1lbnU6IEVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkKTogdm9pZCA9PiB7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICBpZiAoIW1lbnU/LmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBOb2RlKSkge1xuICAgICAgbWVudT8uY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XG4gICAgICBtZW51Py5wcmV2aW91c0VsZW1lbnRTaWJsaW5nPy5jbGFzc0xpc3QucmVtb3ZlKFwiY2xpY2tlZFwiKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfSk7XG59XG5cblxubWFpbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpOiB2b2lkID0+IHtcbiAgaWYgKCFzZXR0aW5nPy5uZXh0RWxlbWVudFNpYmxpbmc/LmNsYXNzTGlzdC5jb250YWlucyhcImhpZGVcIikpIHtcbiAgICBzZXR0aW5nPy5uZXh0RWxlbWVudFNpYmxpbmc/LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpO1xuICB9XG59XG4pXG5cblxudG9nZ2xlTWVudShtYWluQnV0dG9uLCBtYWluQnV0dG9uPy5uZXh0RWxlbWVudFNpYmxpbmcpO1xuaGlkZU1lbnUobWFpbkJ1dHRvbj8ubmV4dEVsZW1lbnRTaWJsaW5nKTtcbnRvZ2dsZU1lbnUoc2V0dGluZywgc2V0dGluZz8ubmV4dEVsZW1lbnRTaWJsaW5nKTtcbmhpZGVNZW51KHNldHRpbmc/Lm5leHRFbGVtZW50U2libGluZyk7XG5cbiIsICJkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZhLWJlbGxcIik/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KClcbiAgTm90aWZpY2F0aW9uLnJlcXVlc3RQZXJtaXNzaW9uKChzdGF0dXMpID0+IHtcbiAgICBjb25zb2xlLmxvZygnTm90aWZpY2F0aW9uIHBlcm1pc3Npb24gc3RhdHVzOicsIHN0YXR1cyk7XG4gIH0pO1xufSlcblxuZnVuY3Rpb24gc2hvd0FOb3RpZmljYXRpb24gIChvcHRpb25zOiBOb3RpZmljYXRpb25PcHRpb25zKSB7XG4gIGlmIChOb3RpZmljYXRpb24ucGVybWlzc2lvbiA9PT0gJ2dyYW50ZWQnKSB7XG4gICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuZ2V0UmVnaXN0cmF0aW9ucygpLnRoZW4oKHJlZykgPT4ge1xuICAgICAgcmVnWzBdLnNob3dOb3RpZmljYXRpb24oJ01vZG8nLCBvcHRpb25zKTtcbiAgICAgIHJlZ1swXS5wdXNoTWFuYWdlci5zdWJzY3JpYmUoe1xuICAgICAgICB1c2VyVmlzaWJsZU9ubHk6IHRydWUsXG4gICAgICAgIGFwcGxpY2F0aW9uU2VydmVyS2V5OiBcIlwiLFxuICAgICAgfSkudGhlbigoKSA9Pnt9KVxuICAgIH0pO1xuICB9XG59XG5cblxuXG4vL1RoaXMgZm9yIHRlc3Rpbmcgb25seVxuLy8gdmFyIG9wdGlvbnMgPSB7XG4vLyAgIGJvZHk6ICdcdTA2NDVcdTA2MzFcdTA2MkRcdTA2MjhcdTA2MjcgXHUwNjI3XHUwNjQ2XHUwNjI3IFx1MDY0NVx1MDYyRFx1MDY0NVx1MDY0OFx1MDYyRicsXG4vLyAgIGljb246ICcuLi8uLi9pbWFnZXMvaWNvbi03Mlx1MDBENzcyLmljbycsXG4vLyAgIGJhZGdlOiAnLi4vLi4vaW1hZ2VzL2ljb24tNzJcdTAwRDc3Mi53ZWJwJyxcblxuLy8gfTtcbi8vIHNob3dBTm90aWZpY2F0aW9uKG9wdGlvbnMpXG4iLCAiLy8gQWRkIGFzc2V0cyB0byBDYWNoZVxuXG5jb25zdCBhc3NldHMgPSBbXG4gIFwiL1wiLFxuICBcIi9pbmRleC5odG1sXCIsXG4gIFwiL2Rpc3QvbWFpbi5qc1wiLFxuICBcIi9kaXN0L3NlcnZpY2VXb3JrZXIuanNcIixcbiAgXCIvc3JjL2Nzcy9zdHlsZS5jc3NcIixcbiAgXCIvc3JjL2Nzcy9hbGwubWluLmNzc1wiLFxuICBcIi9pbWFnZXMvZW50ZXItdGFzay53ZWJwXCIsXG4gIFwiL2ltYWdlcy9tb2RvLWxpZ2h0LndlYnBcIixcbiAgXCIvaW1hZ2VzL2ljb24tNzJcdTAwRDc3Mi5pY29cIixcbiAgXCIvaW1hZ2VzL2ljb24tNzJcdTAwRDc3Mi53ZWJwXCIsXG4gIFwiL2ltYWdlcy9pY29uLTk2XHUwMEQ3OTYud2VicFwiLFxuICBcIi9pbWFnZXMvaWNvbi0xMjhcdTAwRDcxMjgud2VicFwiLFxuICBcIi9pbWFnZXMvaWNvbi0xNDRcdTAwRDcxNDQud2VicFwiLFxuICBcIi9pbWFnZXMvaWNvbi0xNTJcdTAwRDcxNTIud2VicFwiLFxuICBcIi9pbWFnZXMvaWNvbi0xOTJcdTAwRDcxOTIud2VicFwiLFxuICBcIi9pbWFnZXMvaWNvbi0zODRcdTAwRDczODQud2VicFwiLFxuICBcIi9pbWFnZXMvaWNvbi01MTJcdTAwRDc1MTIud2VicFwiLFxuICBcIi9zcmMvd2ViZm9udHMvZmEtc29saWQtOTAwLnR0ZlwiLFxuICBcIi9zcmMvd2ViZm9udHMvZmEtYnJhbmRzLTQwMC50dGZcIixcbiAgXCIvc3JjL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLnR0ZlwiLFxuICBcIi9zcmMvd2ViZm9udHMvZmEtdjRjb21wYXRpYmlsaXR5LnR0ZlwiLFxuICBcIi9zcmMvd2ViZm9udHMvZmEtc29saWQtOTAwLndvZmYyXCIsXG4gIFwiL3NyYy93ZWJmb250cy9mYS1icmFuZHMtNDAwLndvZmYyXCIsXG4gIFwiL3NyYy93ZWJmb250cy9mYS1yZWd1bGFyLTQwMC53b2ZmMlwiLFxuICBcIi9zcmMvd2ViZm9udHMvZmEtdjRjb21wYXRpYmlsaXR5LndvZmYyXCIsXG5dO1xuXG5cbi8vIEluc3RhbGwgdGhlIGFwcFxuc2VsZi5hZGRFdmVudExpc3RlbmVyKFwiaW5zdGFsbFwiLCAoZXZlbnQ6IGFueSk6IHZvaWQgPT4ge1xuICBldmVudD8ud2FpdFVudGlsKFxuICAgIGNhY2hlcy5vcGVuKFwibW9kb1wiKS50aGVuKChjYWNoZTogQ2FjaGUpID0+IGNhY2hlLmFkZEFsbChhc3NldHMpKVxuICApXG59KVxuXG4vLyBGZXRjaCBBc3NldHMgPT4gW05lZWQgUmV2aWV3XVxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIChldmVudDogYW55KTogdm9pZCA9PiB7XG4gIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgIGNhY2hlcy5tYXRjaChldmVudC5yZXF1ZXN0KS50aGVuKChyZXNwb25zZTogUmVzcG9uc2UgfCB1bmRlZmluZWQpOiBSZXNwb25zZSB8IFByb21pc2U8UmVzcG9uc2U+ID0+IHtcbiAgICAgIHJldHVybiByZXNwb25zZSB8fCBmZXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICB9KVxuICApO1xufSk7XG5cblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdmZXRjaCcsIChldmVudDogYW55KTogdm9pZCA9PiB7XG4gIGV2ZW50LnJlc3BvbmRXaXRoKFxuICAgIGNhY2hlcy5vcGVuKCdtb2RvJykudGhlbigoY2FjaGUpID0+IGZldGNoKGV2ZW50LnJlcXVlc3QpXG4gICAgICAudGhlbigocmVzcG9uc2U6IFJlc3BvbnNlKTogUmVzcG9uc2UgPT4ge1xuICAgICAgICBjYWNoZS5wdXQoZXZlbnQucmVxdWVzdCwgcmVzcG9uc2UuY2xvbmUoKSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH0pXG4gICAgKVxuICApO1xufSk7XG5cblxuIiwgImZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgLSBmaWxlIHNpemUgaGFja3NcbiAgICAgICAgcmVxdWVzdC5vbmNvbXBsZXRlID0gcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZSAtIGZpbGUgc2l6ZSBoYWNrc1xuICAgICAgICByZXF1ZXN0Lm9uYWJvcnQgPSByZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTdG9yZShkYk5hbWUsIHN0b3JlTmFtZSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUpO1xuICAgIHJlcXVlc3Qub251cGdyYWRlbmVlZGVkID0gKCkgPT4gcmVxdWVzdC5yZXN1bHQuY3JlYXRlT2JqZWN0U3RvcmUoc3RvcmVOYW1lKTtcbiAgICBjb25zdCBkYnAgPSBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpO1xuICAgIHJldHVybiAodHhNb2RlLCBjYWxsYmFjaykgPT4gZGJwLnRoZW4oKGRiKSA9PiBjYWxsYmFjayhkYi50cmFuc2FjdGlvbihzdG9yZU5hbWUsIHR4TW9kZSkub2JqZWN0U3RvcmUoc3RvcmVOYW1lKSkpO1xufVxubGV0IGRlZmF1bHRHZXRTdG9yZUZ1bmM7XG5mdW5jdGlvbiBkZWZhdWx0R2V0U3RvcmUoKSB7XG4gICAgaWYgKCFkZWZhdWx0R2V0U3RvcmVGdW5jKSB7XG4gICAgICAgIGRlZmF1bHRHZXRTdG9yZUZ1bmMgPSBjcmVhdGVTdG9yZSgna2V5dmFsLXN0b3JlJywgJ2tleXZhbCcpO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdEdldFN0b3JlRnVuYztcbn1cbi8qKlxuICogR2V0IGEgdmFsdWUgYnkgaXRzIGtleS5cbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gZ2V0KGtleSwgY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCAoc3RvcmUpID0+IHByb21pc2lmeVJlcXVlc3Qoc3RvcmUuZ2V0KGtleSkpKTtcbn1cbi8qKlxuICogU2V0IGEgdmFsdWUgd2l0aCBhIGtleS5cbiAqXG4gKiBAcGFyYW0ga2V5XG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSwgY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZHdyaXRlJywgKHN0b3JlKSA9PiB7XG4gICAgICAgIHN0b3JlLnB1dCh2YWx1ZSwga2V5KTtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBTZXQgbXVsdGlwbGUgdmFsdWVzIGF0IG9uY2UuIFRoaXMgaXMgZmFzdGVyIHRoYW4gY2FsbGluZyBzZXQoKSBtdWx0aXBsZSB0aW1lcy5cbiAqIEl0J3MgYWxzbyBhdG9taWMgXHUyMDEzIGlmIG9uZSBvZiB0aGUgcGFpcnMgY2FuJ3QgYmUgYWRkZWQsIG5vbmUgd2lsbCBiZSBhZGRlZC5cbiAqXG4gKiBAcGFyYW0gZW50cmllcyBBcnJheSBvZiBlbnRyaWVzLCB3aGVyZSBlYWNoIGVudHJ5IGlzIGFuIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gLlxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIHNldE1hbnkoZW50cmllcywgY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZHdyaXRlJywgKHN0b3JlKSA9PiB7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHN0b3JlLnB1dChlbnRyeVsxXSwgZW50cnlbMF0pKTtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBHZXQgbXVsdGlwbGUgdmFsdWVzIGJ5IHRoZWlyIGtleXNcbiAqXG4gKiBAcGFyYW0ga2V5c1xuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIGdldE1hbnkoa2V5cywgY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCAoc3RvcmUpID0+IFByb21pc2UuYWxsKGtleXMubWFwKChrZXkpID0+IHByb21pc2lmeVJlcXVlc3Qoc3RvcmUuZ2V0KGtleSkpKSkpO1xufVxuLyoqXG4gKiBVcGRhdGUgYSB2YWx1ZS4gVGhpcyBsZXRzIHlvdSBzZWUgdGhlIG9sZCB2YWx1ZSBhbmQgdXBkYXRlIGl0IGFzIGFuIGF0b21pYyBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIGtleVxuICogQHBhcmFtIHVwZGF0ZXIgQSBjYWxsYmFjayB0aGF0IHRha2VzIHRoZSBvbGQgdmFsdWUgYW5kIHJldHVybnMgYSBuZXcgdmFsdWUuXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlKGtleSwgdXBkYXRlciwgY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZHdyaXRlJywgKHN0b3JlKSA9PiBcbiAgICAvLyBOZWVkIHRvIGNyZWF0ZSB0aGUgcHJvbWlzZSBtYW51YWxseS5cbiAgICAvLyBJZiBJIHRyeSB0byBjaGFpbiBwcm9taXNlcywgdGhlIHRyYW5zYWN0aW9uIGNsb3NlcyBpbiBicm93c2Vyc1xuICAgIC8vIHRoYXQgdXNlIGEgcHJvbWlzZSBwb2x5ZmlsbCAoSUUxMC8xMSkuXG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBzdG9yZS5nZXQoa2V5KS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHN0b3JlLnB1dCh1cGRhdGVyKHRoaXMucmVzdWx0KSwga2V5KTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHByb21pc2lmeVJlcXVlc3Qoc3RvcmUudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KSk7XG59XG4vKipcbiAqIERlbGV0ZSBhIHBhcnRpY3VsYXIga2V5IGZyb20gdGhlIHN0b3JlLlxuICpcbiAqIEBwYXJhbSBrZXlcbiAqIEBwYXJhbSBjdXN0b21TdG9yZSBNZXRob2QgdG8gZ2V0IGEgY3VzdG9tIHN0b3JlLiBVc2Ugd2l0aCBjYXV0aW9uIChzZWUgdGhlIGRvY3MpLlxuICovXG5mdW5jdGlvbiBkZWwoa2V5LCBjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkd3JpdGUnLCAoc3RvcmUpID0+IHtcbiAgICAgICAgc3RvcmUuZGVsZXRlKGtleSk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbiAgICB9KTtcbn1cbi8qKlxuICogRGVsZXRlIG11bHRpcGxlIGtleXMgYXQgb25jZS5cbiAqXG4gKiBAcGFyYW0ga2V5cyBMaXN0IG9mIGtleXMgdG8gZGVsZXRlLlxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIGRlbE1hbnkoa2V5cywgY3VzdG9tU3RvcmUgPSBkZWZhdWx0R2V0U3RvcmUoKSkge1xuICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZHdyaXRlJywgKHN0b3JlKSA9PiB7XG4gICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiBzdG9yZS5kZWxldGUoa2V5KSk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbiAgICB9KTtcbn1cbi8qKlxuICogQ2xlYXIgYWxsIHZhbHVlcyBpbiB0aGUgc3RvcmUuXG4gKlxuICogQHBhcmFtIGN1c3RvbVN0b3JlIE1ldGhvZCB0byBnZXQgYSBjdXN0b20gc3RvcmUuIFVzZSB3aXRoIGNhdXRpb24gKHNlZSB0aGUgZG9jcykuXG4gKi9cbmZ1bmN0aW9uIGNsZWFyKGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWR3cml0ZScsIChzdG9yZSkgPT4ge1xuICAgICAgICBzdG9yZS5jbGVhcigpO1xuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS50cmFuc2FjdGlvbik7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBlYWNoQ3Vyc29yKHN0b3JlLCBjYWxsYmFjaykge1xuICAgIHN0b3JlLm9wZW5DdXJzb3IoKS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5yZXN1bHQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhbGxiYWNrKHRoaXMucmVzdWx0KTtcbiAgICAgICAgdGhpcy5yZXN1bHQuY29udGludWUoKTtcbiAgICB9O1xuICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLnRyYW5zYWN0aW9uKTtcbn1cbi8qKlxuICogR2V0IGFsbCBrZXlzIGluIHRoZSBzdG9yZS5cbiAqXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24ga2V5cyhjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkb25seScsIChzdG9yZSkgPT4ge1xuICAgICAgICAvLyBGYXN0IHBhdGggZm9yIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpZiAoc3RvcmUuZ2V0QWxsS2V5cykge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3Qoc3RvcmUuZ2V0QWxsS2V5cygpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICByZXR1cm4gZWFjaEN1cnNvcihzdG9yZSwgKGN1cnNvcikgPT4gaXRlbXMucHVzaChjdXJzb3Iua2V5KSkudGhlbigoKSA9PiBpdGVtcyk7XG4gICAgfSk7XG59XG4vKipcbiAqIEdldCBhbGwgdmFsdWVzIGluIHRoZSBzdG9yZS5cbiAqXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gdmFsdWVzKGN1c3RvbVN0b3JlID0gZGVmYXVsdEdldFN0b3JlKCkpIHtcbiAgICByZXR1cm4gY3VzdG9tU3RvcmUoJ3JlYWRvbmx5JywgKHN0b3JlKSA9PiB7XG4gICAgICAgIC8vIEZhc3QgcGF0aCBmb3IgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGlmIChzdG9yZS5nZXRBbGwpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLmdldEFsbCgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICByZXR1cm4gZWFjaEN1cnNvcihzdG9yZSwgKGN1cnNvcikgPT4gaXRlbXMucHVzaChjdXJzb3IudmFsdWUpKS50aGVuKCgpID0+IGl0ZW1zKTtcbiAgICB9KTtcbn1cbi8qKlxuICogR2V0IGFsbCBlbnRyaWVzIGluIHRoZSBzdG9yZS4gRWFjaCBlbnRyeSBpcyBhbiBhcnJheSBvZiBgW2tleSwgdmFsdWVdYC5cbiAqXG4gKiBAcGFyYW0gY3VzdG9tU3RvcmUgTWV0aG9kIHRvIGdldCBhIGN1c3RvbSBzdG9yZS4gVXNlIHdpdGggY2F1dGlvbiAoc2VlIHRoZSBkb2NzKS5cbiAqL1xuZnVuY3Rpb24gZW50cmllcyhjdXN0b21TdG9yZSA9IGRlZmF1bHRHZXRTdG9yZSgpKSB7XG4gICAgcmV0dXJuIGN1c3RvbVN0b3JlKCdyZWFkb25seScsIChzdG9yZSkgPT4ge1xuICAgICAgICAvLyBGYXN0IHBhdGggZm9yIG1vZGVybiBicm93c2Vyc1xuICAgICAgICAvLyAoYWx0aG91Z2gsIGhvcGVmdWxseSB3ZSdsbCBnZXQgYSBzaW1wbGVyIHBhdGggc29tZSBkYXkpXG4gICAgICAgIGlmIChzdG9yZS5nZXRBbGwgJiYgc3RvcmUuZ2V0QWxsS2V5cykge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICBwcm9taXNpZnlSZXF1ZXN0KHN0b3JlLmdldEFsbEtleXMoKSksXG4gICAgICAgICAgICAgICAgcHJvbWlzaWZ5UmVxdWVzdChzdG9yZS5nZXRBbGwoKSksXG4gICAgICAgICAgICBdKS50aGVuKChba2V5cywgdmFsdWVzXSkgPT4ga2V5cy5tYXAoKGtleSwgaSkgPT4gW2tleSwgdmFsdWVzW2ldXSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIHJldHVybiBjdXN0b21TdG9yZSgncmVhZG9ubHknLCAoc3RvcmUpID0+IGVhY2hDdXJzb3Ioc3RvcmUsIChjdXJzb3IpID0+IGl0ZW1zLnB1c2goW2N1cnNvci5rZXksIGN1cnNvci52YWx1ZV0pKS50aGVuKCgpID0+IGl0ZW1zKSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IGNsZWFyLCBjcmVhdGVTdG9yZSwgZGVsLCBkZWxNYW55LCBlbnRyaWVzLCBnZXQsIGdldE1hbnksIGtleXMsIHByb21pc2lmeVJlcXVlc3QsIHNldCwgc2V0TWFueSwgdXBkYXRlLCB2YWx1ZXMgfTtcbiIsICJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgc2V0TWFueSwgZ2V0LCB1cGRhdGUsIHNldCB9IGZyb20gJ2lkYi1rZXl2YWwnO1xuXG5jb25zdCBjdXN0b21TdG9yZSA9IGNyZWF0ZVN0b3JlKCdNb2RvJywgJ3BlcnNvbicpO1xuXG5leHBvcnQgY29uc3QgbWFueVRvU3RvcmUgPSAoa2V5VmFsOiBbSURCVmFsaWRLZXkgLCBhbnldW10pOiBQcm9taXNlPHZvaWQ+ID0+IHNldE1hbnkoa2V5VmFsLCBjdXN0b21TdG9yZSk7XG5leHBvcnQgY29uc3QgdG9TdG9yZSA9IChrZXk6IElEQlZhbGlkS2V5LCB2YWx1ZTogYW55KTogUHJvbWlzZTx2b2lkPiA9PiBzZXQoa2V5LCB2YWx1ZSwgY3VzdG9tU3RvcmUpO1xuZXhwb3J0IGNvbnN0IGZyb21TdG9yZSA9IChrZXk6IGFueSk6IGFueSA9PiBnZXQoa2V5LCBjdXN0b21TdG9yZSk7XG5leHBvcnQgY29uc3QgdXBkYXRlU3RvcmFnZSA9IChrZXk6IGFueSwgZm46IGFueSkgPT4gdXBkYXRlKGtleSwgZm4sIGN1c3RvbVN0b3JlKVxuIiwgImV4cG9ydCBjb25zdCBjaGFuZ2VQcm9ncmVzcyA9ICh0YXNrczogYW55LCBzdGF0dXM6IGJvb2xlYW4pID0+IHtcbiAgbGV0IGZpbHRlcmVkVGFza3MgPSB0YXNrcy5maWx0ZXIoKHRhc2s6IGFueSkgPT4gKHRhc2suc3RhdHVzID8gdGFzayA6IFwiXCIpKTtcbiAgbGV0IHBlcmNlbnQgPSBOdW1iZXIucGFyc2VJbnQoYCR7ZmlsdGVyZWRUYXNrcy5sZW5ndGggIT09IDAgPyAoZmlsdGVyZWRUYXNrcy5sZW5ndGggKiAxMDApIC8gdGFza3MubGVuZ3RoIDogMH1gKTtcblxuICBsZXQgcHJvZ3Jlc3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2dyZXNzXCIpIGFzIEhUTUxFbGVtZW50O1xuICBsZXQgcHJvZ3Jlc3NOdW1iZXIgPSBOdW1iZXIucGFyc2VJbnQocHJvZ3Jlc3MuZGF0YXNldC5wcm9ncmVzcyBhcyBzdHJpbmcpXG5cblxuICBpZiAocGVyY2VudCA+IHByb2dyZXNzTnVtYmVyKSB7XG4gICAgY29uc3QgY291bnRQbHVzID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHBlcmNlbnQgPD0gcHJvZ3Jlc3NOdW1iZXIpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChjb3VudFBsdXMpXG4gICAgICB9XG4gICAgIHByb2dyZXNzQ291bnQocHJvZ3Jlc3MsIHByb2dyZXNzTnVtYmVyKVxuICAgICAgcHJvZ3Jlc3NOdW1iZXIrKztcbiAgICB9LCAyMClcbiAgfVxuICBpZiAocGVyY2VudCA8IHByb2dyZXNzTnVtYmVyKSB7XG4gICAgY29uc3QgY291bnRNaW4gPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAocHJvZ3Jlc3NOdW1iZXIgPD0gcGVyY2VudCkge1xuICAgICAgICBjbGVhckludGVydmFsKGNvdW50TWluKVxuICAgICAgfVxuICAgICAgcHJvZ3Jlc3NDb3VudChwcm9ncmVzcywgcHJvZ3Jlc3NOdW1iZXIpXG4gICAgICBwcm9ncmVzc051bWJlci0tO1xuICAgIH0sIDIwKVxuICB9XG59XG5cblxuXG5jb25zdCBwcm9ncmVzc0NvdW50ID0gKGVsZW1lbnQ6IGFueSwgbnVtYmVyOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kID0gYGNvbmljLWdyYWRpZW50KHZhcigtLWZhdi1jb2xvcikgJHtudW1iZXIgLyAxMDBcbiAgICB9dHVybiwgdmFyKC0tbW9kZS1jb2xvcikgMGRlZylgO1xuICBlbGVtZW50LmRhdGFzZXQucHJvZ3Jlc3MgPSBudW1iZXI7XG5cbn1cbiIsICJpbXBvcnQgeyByZW5kZXJUYXNrcyB9IGZyb20gXCIuLi9yZW5kZXJlclwiO1xuaW1wb3J0IHsgdXBkYXRlU3RvcmFnZSwgZnJvbVN0b3JlIH0gZnJvbSBcIi4uL3N0b3JhZ2VcIjtcblxuXG5leHBvcnQgY29uc3QgZmluZExpQ2hpbGQgPSAoaXRlbTogYW55KSA9PiB7XG4gIGl0ZW0ucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKFwiaGlkZVwiKTtcbiAgcmV0dXJuIGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBlZGl0ID0gKGl0ZW06IGFueSkgPT4ge1xuICBsZXQgcCA9IGZpbmRMaUNoaWxkKGl0ZW0pO1xuICBwLnNldEF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiLCBcInRydWVcIik7XG4gIHAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgYXN5bmMgKCkgPT4ge1xuICAgIHAucmVtb3ZlQXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpO1xuXG4gICAgY29uc3QgdGFza3MgPSBhd2FpdCBmcm9tU3RvcmUoXCJ0YXNrc1wiKVxuXG4gICAgdGFza3NbcC5wYXJlbnROb2RlLmRhdGFzZXQuaWRdLmNvbnRlbnQgPSBwLnRleHRDb250ZW50O1xuICAgIHVwZGF0ZVN0b3JhZ2UoXCJ0YXNrc1wiLCAoKSA9PiB0YXNrcylcbiAgICByZW5kZXJUYXNrcyh0YXNrcyk7XG4gIH0pO1xufVxuXG4iLCAiaW1wb3J0IHsgY2hhbmdlUHJvZ3Jlc3MgfSBmcm9tIFwiLi4vcHJvZ3Jlc3NcIjtcbmltcG9ydCB7IHJlbmRlclRhc2tzIH0gZnJvbSBcIi4uL3JlbmRlcmVyXCI7XG5pbXBvcnQgeyBmcm9tU3RvcmUsIHRvU3RvcmUgfSBmcm9tIFwiLi4vc3RvcmFnZVwiO1xuaW1wb3J0IHsgZmluZExpQ2hpbGQgfSBmcm9tIFwiLi9lZGl0XCI7XG5cbmV4cG9ydCBjb25zdCBkZWxldGVUaGlzID0gYXN5bmMgKGl0ZW06IGFueSkgPT4ge1xuICBjb25zdCB0YXNrcyA9IGF3YWl0IGZyb21TdG9yZShcInRhc2tzXCIpO1xuICBjb25zdCBzdGF0dXMgPSB0YXNrc1tmaW5kTGlDaGlsZChpdGVtKS5wYXJlbnROb2RlLmRhdGFzZXQuaWRdLnN0YXR1cztcblxuICB0YXNrcy5zcGxpY2UoZmluZExpQ2hpbGQoaXRlbSkucGFyZW50Tm9kZS5kYXRhc2V0LmlkLCAxKTtcbiAgdGFza3MuZm9yRWFjaCgodGFzazogYW55LCBpbmRleDogYW55KSA9PiB7XG4gICAgdGFzay5pZCA9IGluZGV4O1xuICB9KTtcbiAgYXdhaXQgdG9TdG9yZShcInRhc2tzXCIsIHRhc2tzKVxuICByZW5kZXJUYXNrcyh0YXNrcyk7XG4gIGNoYW5nZVByb2dyZXNzKHRhc2tzLCBzdGF0dXMpO1xufVxuXG5leHBvcnQgY29uc3Qgc2V0U3RhdHVzID0gKGVsZW1lbnQ6IGFueSwgc3RhdHVzOiBib29sZWFuKSA9PiB7XG4gIGZyb21TdG9yZShcInRhc2tzXCIpLnRoZW4oYXN5bmMgKHRhc2tzOiBhbnkpID0+IHtcbiAgICB0YXNrc1tlbGVtZW50LmRhdGFzZXQuaWRdLnN0YXR1cyA9IHN0YXR1cztcbiAgICBjaGFuZ2VQcm9ncmVzcyh0YXNrcywgc3RhdHVzKVxuICAgIHJlbmRlclRhc2tzKHRhc2tzKTtcbiAgICBhd2FpdCB0b1N0b3JlKFwidGFza3NcIiwgdGFza3MpXG4gIH0pXG59XG4iLCAiaW1wb3J0IHsgZnJvbVN0b3JlIH0gZnJvbSBcIi4uL3N0b3JhZ2VcIjtcbmltcG9ydCB7IHNldFN0YXR1cyB9IGZyb20gXCIuL2RlbGV0ZVwiO1xuaW1wb3J0IHsgZmluZExpQ2hpbGQgfSBmcm9tIFwiLi9lZGl0XCI7XG5cbmV4cG9ydCBjb25zdCBtYWtlQ29tcGxldGVkID0gYXN5bmMgKGl0ZW06IGFueSkgPT4ge1xuICBjb25zdCB0YXNrcyA9IGF3YWl0IGZyb21TdG9yZShcInRhc2tzXCIpO1xuXG4gIGxldCBsaSA9IGZpbmRMaUNoaWxkKGl0ZW0pLnBhcmVudE5vZGU7XG4gIGlmIChpdGVtLmNoaWxkcmVuWzFdLnRleHRDb250ZW50ID09IFwiTm90IENvbXBsZXRlZFwiKSB7XG4gICAgc2V0U3RhdHVzKGxpLCBmYWxzZSk7XG4gICAgbGkuZmlyc3RDaGlsZC5zdHlsZS5iYWNncm91bmRDb2xvciA9IHRhc2tzLmljb24gKyBcIlwiO1xuICB9IGVsc2Uge1xuICAgIHNldFN0YXR1cyhsaSwgdHJ1ZSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBoaWRlTWVudSwgdG9nZ2xlTWVudSB9IGZyb20gXCIuL21lbnVcIjtcbmltcG9ydCB7IHBhcmVudGlucHV0IH0gZnJvbSBcIi4vZWxlbWVudHNcIjtcbmltcG9ydCB7IGZyb21TdG9yZSB9IGZyb20gXCIuL3N0b3JhZ2VcIjtcbmltcG9ydCB7IFRhc2sgfSBmcm9tIFwiLi9tYWluXCI7XG5cbmltcG9ydCB7IGRlbGV0ZVRoaXMgfSBmcm9tICcuL1Rhc2tzL2RlbGV0ZSdcbmltcG9ydCB7IGVkaXQgfSBmcm9tICcuL1Rhc2tzL2VkaXQnXG5pbXBvcnQgeyBtYWtlQ29tcGxldGVkIH0gZnJvbSAnLi9UYXNrcy9tYWtlQ29tcGxldGUnXG5pbXBvcnQgeyBjaGFuZ2VQcm9ncmVzcyB9IGZyb20gXCIuL3Byb2dyZXNzXCI7XG5cbmV4cG9ydCBjb25zdCByZW5kZXJUYXNrcyA9IGFzeW5jIChhcnJheU9mVGFza3M6IFRhc2tbXSk6IFByb21pc2U8dm9pZD4gPT4ge1xuXG4gIHBhcmVudGlucHV0LnN0eWxlLmJvcmRlciA9IGAycHggc29saWQgdmFyKC0tY2hvb3Nlbi1jb2xvcilgO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhc2tzLWxpc3QgbGlcIik/LmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICBlbGVtZW50LnJlbW92ZSgpO1xuICB9KTtcblxuICBhcnJheU9mVGFza3MuZm9yRWFjaCgodGFzaywgaW5kZXgpID0+IHtcbiAgICBsZXQgZlNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBmU3Bhbi5jbGFzc0xpc3QuYWRkKFwiaWNvblwiKTtcbiAgICBmU3Bhbi5zdHlsZS5ib3JkZXIgPSBgMnB4IHNvbGlkICR7dGFzay5pY29ufWA7XG4gICAgZlNwYW4uc3R5bGUuY29sb3IgPSBgJHt0YXNrLmljb259YDtcblxuICAgIGxldCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgcC5jbGFzc0xpc3QuYWRkKFwidGFzay1jb250ZW50XCIpO1xuICAgIHAudGV4dENvbnRlbnQgPSB0YXNrLmNvbnRlbnQ7XG5cbiAgICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkaXYuY2xhc3NMaXN0LmFkZChcIm9wdGlvbnNcIik7XG4gICAgZGl2LmlubmVySFRNTCA9IGAgICAgICBcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Bhbi1vcHRzXCI+XHUyMDIyXHUyMDIyXHUyMDIyPC9zcGFuPlxuICAgICAgICAgICAgPHVsIGNsYXNzPVwib3B0aW9ucy1saXN0IGhpZGVcIj5cbiAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZWRpdFwiIG9uY2xpY2s9XCJ3aW5kb3cuZWRpdCh0aGlzKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtcGVuY2lsIGZhLXNtXCI+PC9pPlxuICAgICAgICAgICAgICAgIDxwPkVkaXQ8L3A+XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgIDxsaSBjbGFzcz1cImNvbXBsZXRlZFwiIG9uY2xpY2s9XCJ3aW5kb3cubWFrZUNvbXBsZXRlZCh0aGlzKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtY2hlY2sgZmEtc21cIj48L2k+XG4gICAgICAgICAgICAgICAgPHA+JHt0YXNrLnN0YXR1cyA9PSBmYWxzZSA/IFwiQ29tcGxldGVkXCIgOiBcIk5vdCBDb21wbGV0ZWRcIn08L3A+XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgIDxsaSBjbGFzcz1cImRlbGV0ZVwiIG9uY2xpY2s9XCJ3aW5kb3cuZGVsZXRlVGhpcyh0aGlzKVwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtdHJhc2ggZmEtc21cIj48L2k+XG4gICAgICAgICAgICAgICAgPHA+RGVsZXRlPC9wPlxuICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPC91bD5cbiBgO1xuXG4gICAgbGV0IHNTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgc1NwYW4uY2xhc3NMaXN0LmFkZChcIm1vdmUtdGFza1wiKTtcbiAgICBzU3Bhbi50ZXh0Q29udGVudCA9IFwiOjo6XCI7XG5cbiAgICBsZXQgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgbGkuc2V0QXR0cmlidXRlKFwiZGF0YS1pZFwiLCBgJHt0YXNrLmlkfWApO1xuICAgIGxpLnNldEF0dHJpYnV0ZShcImRhdGEtc3RhdHVzXCIsIHRhc2suc3RhdHVzID8gXCJjb21wbGV0ZWRcIiA6IFwibm90LWNvbXBsZXRlZFwiKTtcbiAgICBmcm9tU3RvcmUoXCJ0YXNrc1wiKS50aGVuKCh0YXNrczogVGFza1tdKSA9PiB7XG4gICAgICBpZiAodGFza3M/Lmxlbmd0aCA+PSA1ICYmICh0YXNrcz8ubGVuZ3RoIC0gMSA9PSBpbmRleCB8fCB0YXNrcz8ubGVuZ3RoIC0gMiA9PSBpbmRleCkpIHtcbiAgICAgICAgbGkuY2xhc3NMaXN0LmFkZChcImxhc3QtbGlcIilcbiAgICAgIH1cbiAgICB9KVxuICAgIGxpLmFwcGVuZChmU3Bhbik7XG4gICAgbGkuYXBwZW5kKHApO1xuICAgIGxpLmFwcGVuZChkaXYpO1xuICAgIGxpLmFwcGVuZChzU3Bhbik7XG5cblxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza3MtbGlzdFwiKT8uYXBwZW5kKGxpKTtcblxuICAgIGNvbnN0IG9wdHM6IE5vZGVMaXN0T2Y8SFRNTEVsZW1lbnQ+ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zcGFuLW9wdHNcIik7XG4gICAgb3B0cy5mb3JFYWNoKChvcHQpID0+IHtcbiAgICAgIG9wdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBvcHRzLmZvckVhY2goKG9wKSA9PiBvcC5uZXh0RWxlbWVudFNpYmxpbmc/LmNsYXNzTGlzdC5hZGQoXCJoaWRlXCIpKTtcbiAgICAgIH0pO1xuXG4gICAgICB0b2dnbGVNZW51KG9wdCwgb3B0Lm5leHRFbGVtZW50U2libGluZyk7XG4gICAgICBoaWRlTWVudShvcHQubmV4dEVsZW1lbnRTaWJsaW5nKTtcbiAgICB9KTtcbiAgfSk7XG4gIGNoYW5nZVByb2dyZXNzKGFycmF5T2ZUYXNrcywgdHJ1ZSlcbn1cblxuXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgZWRpdDogYW55O1xuICAgIG1ha2VDb21wbGV0ZWQ6IGFueTtcbiAgICBkZWxldGVUaGlzOiBhbnk7XG4gIH1cbn1cbndpbmRvdy5lZGl0ID0gZWRpdDtcbndpbmRvdy5kZWxldGVUaGlzID0gZGVsZXRlVGhpcztcbndpbmRvdy5tYWtlQ29tcGxldGVkID0gbWFrZUNvbXBsZXRlZDtcbiIsICJpbXBvcnQgJy4vbWVudSdcbmltcG9ydCAnLi9ub3RpZmljYXRpb25zJ1xuaW1wb3J0ICcuL3NlcnZpY2VXb3JrZXInXG5pbXBvcnQgJy4vc3RvcmFnZSdcbmltcG9ydCAnLi9yZW5kZXJlcidcbmltcG9ydCB7IGZyb21TdG9yZSwgdG9TdG9yZSB9IGZyb20gJy4vc3RvcmFnZSdcbmltcG9ydCB7IHJlbmRlclRhc2tzIH0gZnJvbSAnLi9yZW5kZXJlcidcbmltcG9ydCB7IGNoYW5nZVByb2dyZXNzIH0gZnJvbSAnLi9wcm9ncmVzcydcbmltcG9ydCB7XG4gIG1haW5CdXR0b24sXG4gIG1vZGVCdXR0b24sXG4gIGNvbG9yc0xpc3QsXG4gIHN0YXR1c0xpc3QsXG4gIGV4dHJhQ29sb3IsXG4gIHRhc2tJY29uLFxuICB0YXNrQ29udGVudCxcbiAgaW5wdXRUYXNrQ29sb3IsXG4gIHBhcmVudGlucHV0LFxuICB1c2VySW1hZ2UsXG59IGZyb20gXCIuL2VsZW1lbnRzXCI7XG5cbi8vIHN0YXJ0IHNlbmRpbmcgaW5mbyB0byBsb2NhbFN0b3JhZ2UgLS0gbW9kZSAtIGltYWdlIC0gZmF2Q29sb3IgLS1cbmV4cG9ydCBpbnRlcmZhY2UgVGFzayB7XG4gIGljb246IHN0cmluZztcbiAgaWQ6IG51bWJlcjtcbiAgY29udGVudDogc3RyaW5nO1xuICBzdGF0dXM6IGJvb2xlYW47XG59XG5cblxuLy8gU3RhcnQgSGFuZGxpbmcgSW1hZ2VcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgaW1hZ2UgPSBhd2FpdCBmcm9tU3RvcmUoXCJpbWFnZVwiKVxuICBpZiAoaW1hZ2UgPT0gdW5kZWZpbmVkKSB7XG4gICAgYXdhaXQgdG9TdG9yZShcImltYWdlXCIsIFwiXCIpXG4gIH1cblxuXG4gIGlmIChpbWFnZSAhPT0gXCJcIikge1xuICAgIG1haW5CdXR0b24/LnNldEF0dHJpYnV0ZShcInNyY1wiLCBpbWFnZSk7XG4gIH0gZWxzZSB7XG4gICAgbWFpbkJ1dHRvbj8ucmVtb3ZlQXR0cmlidXRlKFwic3JjXCIpO1xuICB9XG5cbiAgdXNlckltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAvLyBDb252ZXJ0IGltYWdlIHRvIGJhc2U2NCBhbmQgc3RvcmUgaXQgaW4gbG9jYWxTdG9yYWdlXG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwodXNlckltYWdlLmZpbGVzPy5pdGVtKDApIGFzIEJsb2IpO1xuXG4gICAgcmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHRvU3RvcmUoXCJpbWFnZVwiLCByZWFkZXIucmVzdWx0KVxuICAgICAgbWFpbkJ1dHRvbj8uc2V0QXR0cmlidXRlKFwic3JjXCIsIGAke3JlYWRlci5yZXN1bHR9YCk7XG4gICAgfSk7XG5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG5cblxuXG4gIGNvbnN0IG1vZGUgPSBhd2FpdCBmcm9tU3RvcmUoXCJtb2RlXCIpXG5cbiAgaWYgKG1vZGUgPT0gdW5kZWZpbmVkKSB7XG4gICAgYXdhaXQgdG9TdG9yZShcIm1vZGVcIiwgXCJcIilcbiAgfVxuXG4gIG1vZGVCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgbGV0IG1vZGUgPSAhbW9kZUJ1dHRvbj8uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGFya1wiKSA/IFwiZGFya1wiIDogXCJsaWdodFwiO1xuICAgIHRvU3RvcmUoXCJtb2RlXCIsIG1vZGUpXG4gIH0pO1xuXG5cbiAgY29uc3QgZmF2Q29sb3IgPSBhd2FpdCBmcm9tU3RvcmUoXCJmYXYtY29sb3JcIilcblxuICBpZiAoZmF2Q29sb3IgPT0gdW5kZWZpbmVkKSB7XG4gICAgYXdhaXQgdG9TdG9yZShcImZhdi1jb2xvclwiLCBcIlwiKVxuICB9IGVsc2Uge1xuICAgIGRvY3VtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcihcImh0bWxcIilcbiAgICAgID8uc3R5bGUuc2V0UHJvcGVydHkoXCItLWZhdi1jb2xvclwiLCBmYXZDb2xvcik7XG4gIH1cblxuXG4gIGV4dHJhQ29sb3I/LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgY29sb3JzTGlzdFs0XS5kYXRhc2V0LmNvbG9yID0gZXh0cmFDb2xvci52YWx1ZTtcbiAgICB0b1N0b3JlKFwiZmF2LWNvbG9yXCIsIGV4dHJhQ29sb3IudmFsdWUpXG5cbiAgICBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCJodG1sXCIpXG4gICAgICA/LnN0eWxlLnNldFByb3BlcnR5KFwiLS1mYXYtY29sb3JcIiwgZXh0cmFDb2xvci52YWx1ZSk7XG4gIH0pO1xuXG4gIGNvbG9yc0xpc3QuZm9yRWFjaCgoY29sb3I6IGFueSkgPT4ge1xuICAgIGNvbG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0b1N0b3JlKFwiZmF2LWNvbG9yXCIsIGNvbG9yLmRhdGFzZXQuY29sb3IpXG4gICAgICBkb2N1bWVudFxuICAgICAgICAucXVlcnlTZWxlY3RvcihcImh0bWxcIilcbiAgICAgICAgPy5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tZmF2LWNvbG9yXCIsIGNvbG9yLmRhdGFzZXQuY29sb3IpO1xuICAgIH0pO1xuICB9KTtcblxuXG5cbiAgY29uc3QgdGFza3MgPSBhd2FpdCBmcm9tU3RvcmUoXCJ0YXNrc1wiKVxuXG4gIGlmICh0YXNrcyA9PSB1bmRlZmluZWQpIHtcbiAgICBhd2FpdCB0b1N0b3JlKFwidGFza3NcIiwgW10pXG4gIH1cblxuXG4gIC8vIHN0YXJ0IGhhbmRsaW5nIHRhc2tzIG9wZXJhdGlvbnNcbiAgLy8gRGVmaW5lIGFuIG9iamVjdCB0byBzdG9yZSBhbGwgdGFzayBpbmZvXG4gIGlucHV0VGFza0NvbG9yPy5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKGUpID0+IHtcbiAgICBwYXJlbnRpbnB1dC5zdHlsZS5ib3JkZXIgPSBgMnB4IHNvbGlkICR7aW5wdXRUYXNrQ29sb3IudmFsdWV9YDtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcblxuICBsZXQgdGFza3NGTFM6IFRhc2tbXSA9IFtdO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmlucHV0LWJveFwiKT8uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBhc3luYyAoZSkgPT4ge1xuICAgIGlmICh0YXNrQ29udGVudC52YWx1ZSAhPT0gXCJcIikge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBjb25zdCB0YXNrcyA9IGF3YWl0IGZyb21TdG9yZShcInRhc2tzXCIpXG4gICAgICBjb25zb2xlLmxvZyh0YXNrcyk7XG5cbiAgICAgIGNvbnN0IHVwZGF0ZWRUYXNrcyA9IFsuLi50YXNrcywge1xuICAgICAgICBpY29uOiB0YXNrSWNvbi52YWx1ZSxcbiAgICAgICAgaWQ6IHRhc2tzLmxlbmd0aCxcbiAgICAgICAgY29udGVudDogdGFza0NvbnRlbnQudmFsdWUsXG4gICAgICAgIHN0YXR1czogZmFsc2VcbiAgICAgIH1dXG5cbiAgICAgIHRvU3RvcmUoXCJ0YXNrc1wiLCB1cGRhdGVkVGFza3MpXG5cbiAgICAgIHJlbmRlclRhc2tzKHVwZGF0ZWRUYXNrcylcbiAgICB9XG4gICAgdGFza0NvbnRlbnQudmFsdWUgPSBcIlwiO1xuICB9KTtcblxuICBjb25zdCBkYXJrQ29sb3JzID0gbmV3IE1hcCgpO1xuICBjb25zdCBsaWdodENvbG9ycyA9IG5ldyBNYXAoKTtcblxuICBkYXJrQ29sb3JzXG4gICAgLnNldChcIi0tbW9kZS1jb2xvclwiLCBcIiMyMjJcIilcbiAgICAuc2V0KFwiLS1hbHQtbW9kZS1jb2xvclwiLCBcIiNmZmZcIilcbiAgICAuc2V0KFwiLS1ob3Zlci1jb2xvclwiLCBcIiMzNjM2MzZcIilcbiAgICAuc2V0KFwiLS1zZWMtbW9kZS1jb2xvclwiLCBcIiMzMzNcIik7XG5cbiAgbGlnaHRDb2xvcnNcbiAgICAuc2V0KFwiLS1tb2RlLWNvbG9yXCIsIFwiI2ZmZlwiKVxuICAgIC5zZXQoXCItLWFsdC1tb2RlLWNvbG9yXCIsIFwiIzAwMFwiKVxuICAgIC5zZXQoXCItLWhvdmVyLWNvbG9yXCIsIFwiI2Y2ZjZmNlwiKVxuICAgIC5zZXQoXCItLXNlYy1tb2RlLWNvbG9yXCIsIFwiI2VlZVwiKTtcblxuICBtb2RlQnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGUpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIG1vZGVCdXR0b24/LmNsYXNzTGlzdC50b2dnbGUoXCJkYXJrXCIpO1xuICAgIGlmIChtb2RlQnV0dG9uPy5jbGFzc0xpc3QuY29udGFpbnMoXCJkYXJrXCIpID09IHRydWUpIHtcbiAgICAgIGZvciAoY29uc3QgW3ZhcmlhYmxlLCB2YWx1ZV0gb2YgZGFya0NvbG9ycykge1xuXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJodG1sXCIpPy5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJpYWJsZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobW9kZUJ1dHRvbj8uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGFya1wiKSA9PSBmYWxzZSkge1xuICAgICAgZm9yIChjb25zdCBbdmFyaWFibGUsIHZhbHVlXSBvZiBsaWdodENvbG9ycykge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaHRtbFwiKT8uc3R5bGUuc2V0UHJvcGVydHkodmFyaWFibGUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBzcGVjaWZpYyBjbGFzc2VzIGZyb20gZWxlbWVudFxuICAgKiAqL1xuICBmdW5jdGlvbiBjaGFuZ2VBY3RpdmUoXG4gICAgY29sbGVjdGlvbk9mRWxlOiBOb2RlTGlzdE9mPEVsZW1lbnQ+LFxuICAgIC4uLmNsYXNzZXM6IHN0cmluZ1tdXG4gICkge1xuICAgIGNvbGxlY3Rpb25PZkVsZS5mb3JFYWNoKChlbGUpID0+IHtcbiAgICAgIGVsZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGU6IGFueSkgPT4ge1xuICAgICAgICBjb2xsZWN0aW9uT2ZFbGUuZm9yRWFjaCgoZWxlKSA9PiBlbGUuY2xhc3NMaXN0LnJlbW92ZShjbGFzc2VzLmpvaW4oXCIgXCIpKSk7XG4gICAgICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNoYW5nZUFjdGl2ZShjb2xvcnNMaXN0LCBcImFjdGl2ZVwiKTtcbiAgY2hhbmdlQWN0aXZlKHN0YXR1c0xpc3QsIFwiYWN0aXZlXCIpO1xuXG4gIHN0YXR1c0xpc3RbMF0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0YXNrcyA9IGF3YWl0IGZyb21TdG9yZShcInRhc2tzXCIpXG4gICAgcmVuZGVyVGFza3ModGFza3MpXG4gIH0pXG5cbiAgc3RhdHVzTGlzdFsxXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgZnJvbVN0b3JlKFwidGFza3NcIilcbiAgICByZW5kZXJUYXNrcyhcbiAgICAgIHRhc2tzLmZpbHRlcigoZWxlOiBhbnkpID0+ICghZWxlLnN0YXR1cyA/IGVsZSA6IFwiXCIpKVxuICAgIClcbiAgfSk7XG5cblxuICBzdGF0dXNMaXN0WzJdLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdGFza3MgPSBhd2FpdCBmcm9tU3RvcmUoXCJ0YXNrc1wiKVxuICAgIHJlbmRlclRhc2tzKFxuICAgICAgdGFza3MuZmlsdGVyKChlbGU6IGFueSkgPT4gKGVsZS5zdGF0dXMgPyBlbGUgOiBcIlwiKSksXG4gICAgKVxuICB9KTtcblxuICBmcm9tU3RvcmUoXCJtb2RlXCIpLnRoZW4oKG1vZGU6IHN0cmluZykgPT4ge1xuICAgIGlmIChtb2RlID09IFwiZGFya1wiKSB7XG4gICAgICBtb2RlQnV0dG9uPy5jbGFzc0xpc3QuYWRkKFwiZGFya1wiKTtcbiAgICAgIGZvciAoY29uc3QgW3ZhcmlhYmxlLCB2YWx1ZV0gb2YgZGFya0NvbG9ycykge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaHRtbFwiKT8uc3R5bGUuc2V0UHJvcGVydHkodmFyaWFibGUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kZSAhPSBcImRhcmtcIikge1xuICAgICAgbW9kZUJ1dHRvbj8uY2xhc3NMaXN0LnJlbW92ZShcImRhcmtcIik7XG4gICAgICBmb3IgKGNvbnN0IFt2YXJpYWJsZSwgdmFsdWVdIG9mIGxpZ2h0Q29sb3JzKSB7XG5cbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImh0bWxcIik/LnN0eWxlLnNldFByb3BlcnR5KHZhcmlhYmxlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIGZyb21TdG9yZShcInRhc2tzXCIpLnRoZW4oKHRhc2tzOiBUYXNrW10pID0+IHtcbiAgICBpZiAodGFza3MgJiYgdGFza3MgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBjaGFuZ2VQcm9ncmVzcyhbXSwgdGFza3MsIHRydWUpXG4gICAgICByZW5kZXJUYXNrcyh0YXNrcyk7XG5cbiAgICB9XG4gIH0pXG59KVxuIl0sCiAgIm1hcHBpbmdzIjogIm1CQUFPLElBQ0xBLEVBQStCLFNBQVMsZUFBZSxRQUFRLEVBQy9EQyxFQUFhLFNBQVMsZUFBZSxNQUFNLEVBQzNDQyxFQUE4QixTQUFTLGVBQWUsU0FBUyxFQUMvREMsRUFBa0IsU0FBUyxpQkFBaUIsaUJBQWlCLEVBQzdEQyxFQUFrQixTQUFTLGVBQWUsYUFBYSxFQUN2REMsRUFBWSxTQUFTLGVBQWUsU0FBUyxFQUM3Q0MsRUFBYSxTQUFTLGlCQUFpQixZQUFZLEVBQ25EQyxFQUE2QixTQUFTLGVBQWUsV0FBVyxFQUNoRUMsRUFBZ0MsU0FBUyxlQUFlLGNBQWMsRUFDdEVDLEVBQW1DLFNBQVMsY0FBYyw2QkFBNkIsRUFDdkZDLEVBQWNELEVBQWUsV0NQeEIsSUFBTUUsRUFBYSxDQUFDQyxFQUE0QkMsSUFBMkMsQ0FDaEdELEdBQVEsaUJBQWlCLFFBQVVFLEdBQVUsQ0FDM0NELEdBQU0sVUFBVSxPQUFPLE1BQU0sRUFDN0JELEdBQVEsVUFBVSxPQUFPLFNBQVMsRUFDbENFLEVBQU0sZ0JBQWdCLENBQ3hCLENBQUMsQ0FDSCxFQUVhQyxFQUFZRixHQUEyQyxDQUNsRSxTQUFTLGlCQUFpQixRQUFVQyxHQUFVLENBQ3ZDRCxHQUFNLFNBQVNDLEVBQU0sTUFBYyxJQUN0Q0QsR0FBTSxVQUFVLElBQUksTUFBTSxFQUMxQkEsR0FBTSx3QkFBd0IsVUFBVSxPQUFPLFNBQVMsRUFDeERDLEVBQU0sZ0JBQWdCLEVBRTFCLENBQUMsQ0FDSCxFQUdBRSxFQUFXLGlCQUFpQixRQUFTLElBQVksQ0FDMUNDLEdBQVMsb0JBQW9CLFVBQVUsU0FBUyxNQUFNLEdBQ3pEQSxHQUFTLG9CQUFvQixVQUFVLElBQUksTUFBTSxDQUVyRCxDQUNBLEVBR0FOLEVBQVdLLEVBQVlB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Q3JDQSxHQUFTQSxHQUFTLE1BRXBCRyxFQUFZSCxDQUFLLENBR3JCLENBQUMsQ0FDSCxDQUFDIiwKICAibmFtZXMiOiBbIm1haW5CdXR0b24iLCAibW9kZUJ1dHRvbiIsICJzZXR0aW5nIiwgImNvbG9yc0xpc3QiLCAiZXh0cmFDb2xvciIsICJ1c2VySW1hZ2UiLCAic3RhdHVzTGlzdCIsICJ0YXNrSWNvbiIsICJ0YXNrQ29udGVudCIsICJpbnB1dFRhc2tDb2xvciIsICJwYXJlbnRpbnB1dCIsICJ0b2dnbGVNZW51IiwgImJ1dHRvbiIsICJtZW51IiwgImV2ZW50IiwgImhpZGVNZW51IiwgIm1haW5CdXR0b24iLCAic2V0dGluZyIsICJzdGF0dXMiLCAiYXNzZXRzIiwgImV2ZW50IiwgImNhY2hlIiwgInJlc3BvbnNlIiwgInByb21pc2lmeVJlcXVlc3QiLCAicmVxdWVzdCIsICJyZXNvbHZlIiwgInJlamVjdCIsICJjcmVhdGVTdG9yZSIsICJkYk5hbWUiLCAic3RvcmVOYW1lIiwgImRicCIsICJ0eE1vZGUiLCAiY2FsbGJhY2siLCAiZGIiLCAiZGVmYXVsdEdldFN0b3JlRnVuYyIsICJkZWZhdWx0R2V0U3RvcmUiLCAiZ2V0IiwgImtleSIsICJjdXN0b21TdG9yZSIsICJzdG9yZSIsICJzZXQiLCAidmFsdWUiLCAidXBkYXRlIiwgImtleSIsICJ1cGRhdGVyIiwgImN1c3RvbVN0b3JlIiwgImRlZmF1bHRHZXRTdG9yZSIsICJzdG9yZSIsICJyZXNvbHZlIiwgInJlamVjdCIsICJwcm9taXNpZnlSZXF1ZXN0IiwgImVyciIsICJjdXN0b21TdG9yZSIsICJjcmVhdGVTdG9yZSIsICJ0b1N0b3JlIiwgImtleSIsICJ2YWx1ZSIsICJzZXQiLCAiY3VzdG9tU3RvcmUiLCAiZnJvbVN0b3JlIiwgImdldCIsICJ1cGRhdGVTdG9yYWdlIiwgImZuIiwgInVwZGF0ZSIsICJjaGFuZ2VQcm9ncmVzcyIsICJ0YXNrcyIsICJzdGF0dXMiLCAiZmlsdGVyZWRUYXNrcyIsICJ0YXNrIiwgInBlcmNlbnQiLCAicHJvZ3Jlc3MiLCAicHJvZ3Jlc3NOdW1iZXIiLCAiY291bnRQbHVzIiwgInByb2dyZXNzQ291bnQiLCAiY291bnRNaW4iLCAiZWxlbWVudCIsICJudW1iZXIiLCAiZmluZExpQ2hpbGQiLCAiaXRlbSIsICJlZGl0IiwgInAiLCAidGFza3MiLCAiZnJvbVN0b3JlIiwgInVwZGF0ZVN0b3JhZ2UiLCAicmVuZGVyVGFza3MiLCAiZGVsZXRlVGhpcyIsICJpdGVtIiwgInRhc2tzIiwgImZyb21TdG9yZSIsICJzdGF0dXMiLCAiZmluZExpQ2hpbGQiLCAidGFzayIsICJpbmRleCIsICJ0b1N0b3JlIiwgInJlbmRlclRhc2tzIiwgImNoYW5nZVByb2dyZXNzIiwgInNldFN0YXR1cyIsICJlbGVtZW50IiwgIm1ha2VDb21wbGV0ZWQiLCAiaXRlbSIsICJ0YXNrcyIsICJmcm9tU3RvcmUiLCAibGkiLCAiZmluZExpQ2hpbGQiLCAic2V0U3RhdHVzIiwgInJlbmRlclRhc2tzIiwgImFycmF5T2ZUYXNrcyIsICJwYXJlbnRpbnB1dCIsICJlbGVtZW50IiwgInRhc2siLCAiaW5kZXgiLCAiZlNwYW4iLCAicCIsICJkaXYiLCAic1NwYW4iLCAibGkiLCAiZnJvbVN0b3JlIiwgInRhc2tzIiwgIm9wdHMiLCAib3B0IiwgIm9wIiwgInRvZ2dsZU1lbnUiLCAiaGlkZU1lbnUiLCAiY2hhbmdlUHJvZ3Jlc3MiLCAiZWRpdCIsICJkZWxldGVUaGlzIiwgIm1ha2VDb21wbGV0ZWQiLCAiaW1hZ2UiLCAiZnJvbVN0b3JlIiwgInRvU3RvcmUiLCAibWFpbkJ1dHRvbiIsICJ1c2VySW1hZ2UiLCAiZXZlbnQiLCAicmVhZGVyIiwgIm1vZGVCdXR0b24iLCAibW9kZSIsICJmYXZDb2xvciIsICJleHRyYUNvbG9yIiwgImNvbG9yc0xpc3QiLCAiY29sb3IiLCAiaW5wdXRUYXNrQ29sb3IiLCAiZSIsICJwYXJlbnRpbnB1dCIsICJ0YXNrc0ZMUyIsICJ0YXNrQ29udGVudCIsICJ0YXNrcyIsICJ1cGRhdGVkVGFza3MiLCAidGFza0ljb24iLCAicmVuZGVyVGFza3MiLCAiZGFya0NvbG9ycyIsICJsaWdodENvbG9ycyIsICJ2YXJpYWJsZSIsICJ2YWx1ZSIsICJjaGFuZ2VBY3RpdmUiLCAiY29sbGVjdGlvbk9mRWxlIiwgImNsYXNzZXMiLCAiZWxlIiwgInN0YXR1c0xpc3QiXQp9Cg==
